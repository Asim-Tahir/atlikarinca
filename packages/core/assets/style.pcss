#loadelayed {
  width: var(--loadelayed-container-width);
  height: var(--loadelayed-container-height);
  display: flex;

  /* ============ Loader position CSS starts here. ============ */
  &[data-loadelayed-spinner-position="top-left"] {
    justify-content: flex-start;
    align-items: flex-start;
  }
  &[data-loadelayed-spinner-position="top"] {
    justify-content: center;
    align-items: flex-start;
  }
  &[data-loadelayed-spinner-position="top-right"] {
    justify-content: flex-end;
    align-items: flex-start;
  }

  &[data-loadelayed-spinner-position="center"],
  &:not([data-loadelayed-spinner-position]) {
    justify-content: center;
    align-items: center;
  }
  &[data-loadelayed-spinner-position="left"] {
    justify-content: flex-start;
    align-items: center;
  }
  &[data-loadelayed-spinner-position="right"] {
    justify-content: flex-end;
    align-items: center;
  }

  &[data-loadelayed-spinner-position="bottom"] {
    justify-content: center;
    align-items: flex-end;
  }
  &[data-loadelayed-spinner-position="bottom-left"] {
    justify-content: flex-start;
    align-items: flex-end;
  }
  &[data-loadelayed-spinner-position="bottom-right"] {
    justify-content: flex-end;
    align-items: flex-end;
  }
  /* ============ Loader position CSS ends here. ============ */

  /**
   * When the loader's child elements have `loader-container` class or
   * `data-loadelayed-keep` attributes it's hidden.
   */
  &[data-loadelayed-hide-content][data-loadelayed-loading="true"]
    :not(:where([data-loadelayed-keep], [id^="loader"], [class^="loader"])) {
    display: none;
  }

  &.loader-full {
    width: 100vw;
    height: 100vh;
    background-color: rgba(33, 33, 33, 0.95);
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 99999;
    user-select: none;
    pointer-events: none;
  }
}
